/**
 * Automatically generated by Zserio C++ extension version 2.8.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef SQL_DATABASES_DB_WITH_RELOCATION_AMERICA_DB_H
#define SQL_DATABASES_DB_WITH_RELOCATION_AMERICA_DB_H

#include <memory>
#include <array>
#include <set>
#include <zserio/Vector.h>
#include <map>
#include <zserio/Vector.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/UniquePtr.h>
#include <zserio/AllocatorHolder.h>
#include <zserio/StringView.h>
#include <zserio/ISqliteDatabase.h>
#include <zserio/SqliteConnection.h>

#include <sql_databases/db_with_relocation/CountryMapTable.h>

namespace sql_databases
{
namespace db_with_relocation
{

class AmericaDb : public ::zserio::ISqliteDatabase,
        public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    typedef ::std::map<::zserio::string<>, ::zserio::string<>> TRelocationMap;

    explicit AmericaDb(const ::zserio::string<>& dbFileName,
            const TRelocationMap& tableToDbFileNameRelocationMap = TRelocationMap(),
            const allocator_type& allocator = allocator_type());
    explicit AmericaDb(const ::zserio::string<>& dbFileName, const allocator_type& allocator);
    explicit AmericaDb(sqlite3* externalConnection,
            const TRelocationMap& tableToAttachedDbNameRelocationMap = TRelocationMap(),
            const allocator_type& allocator = allocator_type());
    explicit AmericaDb(sqlite3* externalConnection, const allocator_type& allocator);

    virtual ~AmericaDb() override;

    AmericaDb(const AmericaDb&) = delete;
    AmericaDb& operator=(const AmericaDb&) = delete;

    AmericaDb(AmericaDb&&) = delete;
    AmericaDb& operator=(AmericaDb&&) = delete;

    ::zserio::SqliteConnection& connection() noexcept override;

    ::sql_databases::db_with_relocation::CountryMapTable& getUsa() noexcept;
    ::sql_databases::db_with_relocation::CountryMapTable& getCanada() noexcept;
    ::sql_databases::db_with_relocation::CountryMapTable& getSlovakia() noexcept;
    ::sql_databases::db_with_relocation::CountryMapTable& getCzechia() noexcept;

    virtual void createSchema() override;
    virtual void createSchema(const ::std::set<::zserio::string<>>& withoutRowIdTableNamesBlackList);
    virtual void deleteSchema() override;

    static ::zserio::StringView databaseName() noexcept;
    static const ::std::array<::zserio::StringView, 4>& tableNames() noexcept;

private:
    void initTables();
    void attachDatabase(::zserio::StringView fileName, ::zserio::StringView attachedDbName);
    void detachDatabases();

    static ::zserio::StringView tableNameUsa() noexcept;
    static ::zserio::StringView tableNameCanada() noexcept;
    static ::zserio::StringView tableNameSlovakia() noexcept;
    static ::zserio::StringView tableNameCzechia() noexcept;

    ::zserio::SqliteConnection m_db;
    ::zserio::vector<::zserio::string<>> m_attachedDbList;
    TRelocationMap m_tableToAttachedDbNameRelocationMap;

    ::zserio::unique_ptr<::sql_databases::db_with_relocation::CountryMapTable> m_usa_;
    ::zserio::unique_ptr<::sql_databases::db_with_relocation::CountryMapTable> m_canada_;
    ::zserio::unique_ptr<::sql_databases::db_with_relocation::CountryMapTable> m_slovakia_;
    ::zserio::unique_ptr<::sql_databases::db_with_relocation::CountryMapTable> m_czechia_;
};

} // namespace db_with_relocation
} // namespace sql_databases

#endif // SQL_DATABASES_DB_WITH_RELOCATION_AMERICA_DB_H
