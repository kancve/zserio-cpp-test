/**
 * Automatically generated by Zserio C++ extension version 2.8.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef SQL_DATABASES_SIMPLE_DB_TILE_H
#define SQL_DATABASES_SIMPLE_DB_TILE_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/Array.h>
#include <zserio/ArrayTraits.h>
#include <zserio/Types.h>
#include <zserio/Vector.h>

namespace sql_databases
{
namespace simple_db
{

class Tile
{
private:
    using ZserioArrayType_data = ::zserio::Array<::zserio::vector<uint8_t>, ::zserio::StdIntArrayTraits<uint8_t>, ::zserio::ArrayType::NORMAL>;

public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit Tile(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_data>
    Tile(
            uint8_t version_,
            uint32_t numElements_,
            ZSERIO_T_data&& data_,
            const allocator_type& allocator = allocator_type()) :
            Tile(allocator)
    {
        m_version_ = version_;
        m_numElements_ = numElements_;
        m_data_ = ZserioArrayType_data(::std::forward<ZSERIO_T_data>(data_), ::zserio::StdIntArrayTraits<uint8_t>());
    }

    explicit Tile(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Tile(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Tile() = default;

    Tile(const Tile&) = default;
    Tile& operator=(const Tile&) = default;

    Tile(Tile&&) = default;
    Tile& operator=(Tile&&) = default;

    Tile(::zserio::PropagateAllocatorT,
            const Tile& other, const allocator_type& allocator);

    uint8_t getVersion() const;
    void setVersion(uint8_t version_);

    uint32_t getNumElements() const;
    void setNumElements(uint32_t numElements_);

    const ::zserio::vector<uint8_t>& getData() const;
    ::zserio::vector<uint8_t>& getData();
    void setData(const ::zserio::vector<uint8_t>& data_);
    void setData(::zserio::vector<uint8_t>&& data_);

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const Tile& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    uint8_t readVersion(::zserio::BitStreamReader& in);
    uint8_t readVersion(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);
    uint32_t readNumElements(::zserio::BitStreamReader& in);
    uint32_t readNumElements(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in);
    ZserioArrayType_data readData(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ZserioArrayType_data readData(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    uint8_t m_version_;
    uint32_t m_numElements_;
    ZserioArrayType_data m_data_;
};

} // namespace simple_db
} // namespace sql_databases

#endif // SQL_DATABASES_SIMPLE_DB_TILE_H
