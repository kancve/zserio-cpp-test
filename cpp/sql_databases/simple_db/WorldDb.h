/**
 * Automatically generated by Zserio C++ extension version 2.8.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef SQL_DATABASES_SIMPLE_DB_WORLD_DB_H
#define SQL_DATABASES_SIMPLE_DB_WORLD_DB_H

#include <memory>
#include <array>
#include <set>
#include <zserio/Vector.h>
#include <map>
#include <zserio/Vector.h>
#include <zserio/ArrayTraits.h>
#include <zserio/String.h>
#include <zserio/UniquePtr.h>
#include <zserio/AllocatorHolder.h>
#include <zserio/StringView.h>
#include <zserio/ISqliteDatabase.h>
#include <zserio/SqliteConnection.h>

#include <sql_databases/simple_db/GeoMapTable.h>

namespace sql_databases
{
namespace simple_db
{

class WorldDb : public ::zserio::ISqliteDatabase,
        public ::zserio::AllocatorHolder<::std::allocator<uint8_t>>
{
public:
    typedef ::std::map<::zserio::string<>, ::zserio::string<>> TRelocationMap;

    explicit WorldDb(const ::zserio::string<>& dbFileName,
            const TRelocationMap& tableToDbFileNameRelocationMap = TRelocationMap(),
            const allocator_type& allocator = allocator_type());
    explicit WorldDb(const ::zserio::string<>& dbFileName, const allocator_type& allocator);
    explicit WorldDb(sqlite3* externalConnection,
            const TRelocationMap& tableToAttachedDbNameRelocationMap = TRelocationMap(),
            const allocator_type& allocator = allocator_type());
    explicit WorldDb(sqlite3* externalConnection, const allocator_type& allocator);

    virtual ~WorldDb() override;

    WorldDb(const WorldDb&) = delete;
    WorldDb& operator=(const WorldDb&) = delete;

    WorldDb(WorldDb&&) = delete;
    WorldDb& operator=(WorldDb&&) = delete;

    ::zserio::SqliteConnection& connection() noexcept override;

    ::sql_databases::simple_db::GeoMapTable& getEurope() noexcept;
    ::sql_databases::simple_db::GeoMapTable& getAmerica() noexcept;

    virtual void createSchema() override;
    virtual void createSchema(const ::std::set<::zserio::string<>>& withoutRowIdTableNamesBlackList);
    virtual void deleteSchema() override;

    static ::zserio::StringView databaseName() noexcept;
    static const ::std::array<::zserio::StringView, 2>& tableNames() noexcept;

private:
    void initTables();
    void attachDatabase(::zserio::StringView fileName, ::zserio::StringView attachedDbName);
    void detachDatabases();

    static ::zserio::StringView tableNameEurope() noexcept;
    static ::zserio::StringView tableNameAmerica() noexcept;

    ::zserio::SqliteConnection m_db;
    ::zserio::vector<::zserio::string<>> m_attachedDbList;
    TRelocationMap m_tableToAttachedDbNameRelocationMap;

    ::zserio::unique_ptr<::sql_databases::simple_db::GeoMapTable> m_europe_;
    ::zserio::unique_ptr<::sql_databases::simple_db::GeoMapTable> m_america_;
};

} // namespace simple_db
} // namespace sql_databases

#endif // SQL_DATABASES_SIMPLE_DB_WORLD_DB_H
